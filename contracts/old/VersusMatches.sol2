pragma solidity 0.5.10;
import 'openzeppelin-solidity/contracts/ownership/Ownable.sol';

/**
 * @title Ownable
 * @dev Este contrato permite registrar eventos deportivos del tipo Versus, es decir
 * uno contra uno como un partido de fútbol, o un combate de Box. 
 * En este contrato sólo se almacena los ID de los eventos, compentecias, etc. Si
 * desea conocer el detalle de los competidores, competencias, etc. Su aplicaciónp
 * cliente debe invocar a los servicios de Betex Laursia para obtener la información.
 */
contract VersusMatches is Ownable{
    //Evento emitido cuando se crea un nuevo Match
    event NewMatch(uint256 idLaurasia);
    event UpdateMatch(uint256 idLaurasia);
  
    //MatchType puede ser por ejemplo Fútbol, Boxeo, MMA. Se flexibiliza
    //para agregar otros tipos en el futuro.
    struct MatchType{
        bool canDraw;       //true si se puede empatar, false de lo contrario
        string description; //descripción
        uint matchCounter;  //Permite contar la cantidad de matches registrados
    }

    //Match corresponde aun evento determinado, por ejemplo un partido de Fútbol
    //o un combate de artes marciales mixtas.
    struct Match{
        uint128 idCompetition;  //Id de la competition en Laurasia  
        uint128 matchType;    //id del tipo de match, en el contrato   
        uint    startDate;    //timestamp del inicio del evento con timezone GMT
        string  country;      //País donde se juega el evento en formato  ISO 3166-2. Si es una internacional
                              //por ejemplo la copa libertadores o un partido de la FIFA dirá "INTL"
    }

    //Key: Id de Laurasia. Se mantiene uniformidad
    mapping(uint128 => MatchType) public matchTypes;
    //Verifica si existe un match. Key: Id del tipo de Match, por ejemplo deporte
    mapping(uint128 => bool) private matchTypesChecker;

    //Permite determinar el ID de un Match. Key: Id Laursia, Value: id. indice de matches
    mapping(uint256 => Match)  public matches;    
    //Verifica si existe un match. Key: id del Match
    mapping(uint256 => bool) private matchesLaurasiaExistence;
 
    // ======================== MATCH TYPES ======================== //
    /**
     * @dev Verifica si existe el MatchType
     * @param _matchTypeId - Id Laurasia del tipo de Match
     * @return true si el tipo de Match Existe, false de lo contrario
     */
    function matchTypeExists(uint128 _matchTypeId) public view returns(bool){
        return matchTypesChecker[_matchTypeId];
    }

    /**
     * @dev Crea un nuevo MatchType e inicializa el contador en cero. Dicho contador no se 
     *      modificar una vez creado, ni se puede eliminar el MatchType. En caso de error
     *      en la creción, corregir con updateMatchType 
     * @param _matchTypeId - Id Laurasia del tipo de Match
     * @param _canDraw - true si el tipo de Match permite empate, false de lo contrario
     * @param _description - Descripción del tipo
     */
    function addMatchType(uint128 _matchTypeId, bool _canDraw, string memory _description) public onlyOwner(){
        require(!matchTypesChecker[_matchTypeId], "MT0001 MATCH TYPE EXISTS");
        matchTypes[_matchTypeId] = MatchType(_canDraw, _description, 0);
        matchTypesChecker[_matchTypeId] = true;
    }   

    /**
     * @dev Actauliza un MatchType existente. No reinicia el contador
     * @param _matchTypeId - Id Laurasia del tipo de Match
     * @param _canDraw - true si el tipo de Match permite empate, false de lo contrario
     * @param _description - Descripción del tipo    
     */
    function updateMatchType(uint128 _matchTypeId, bool _canDraw, string memory _description) public onlyOwner(){
        require(matchTypesChecker[_matchTypeId], "MT0002 MATCH TYPE DOES NOT EXIST");
        matchTypes[_matchTypeId].canDraw = _canDraw;
        matchTypes[_matchTypeId].description = _description;
    }   

    // ======================== MATCHES ======================== //
    /**
     * @dev Crea un nuevo Match (Evento deportivo)
     * @param _idLaurasia - Id Laurasia del match. 
     * @param _idCompetition - Id Laursia de la competición del Match, por ejemplo 122: ChampionsLeague
     * @param _idMatchType - Typo de Match. Debe existir en el contrato, por ejemplo: 1: Fútbol
     * @param _startDateTimestamp - Timestamp de inicio del partido o combate con timezone GMT.
     * @param _countryCode - Código ISO 3166-2 del país de la competencia. Si es internacional viajan INTLs 
     */
    function createMatch( uint256 _idLaurasia, uint128 _idCompetition, uint128 _idMatchType
                        , uint _startDateTimestamp, string calldata _countryCode ) external onlyOwner(){
        
        require(matchTypesChecker[_idMatchType], "MT0002 MATCH TYPE DOES NOT EXIST");     
        require(!matchesLaurasiaExistence[_idLaurasia], "MH0001 MATCH WITH LARUASIA ID ALREADY EXISTS" );  

        matches[_idLaurasia] = Match( _idCompetition
                                    , _idMatchType
                                    , _startDateTimestamp
                                    , _countryCode );
        matchesLaurasiaExistence[_idLaurasia] = true;
        matchTypes[_idMatchType].matchCounter++;
        emit NewMatch(_idLaurasia);                    
    }

    /**
     * @dev Actualiza un nuevo Match (Evento deportivo)
     * @param _idLaurasia - Id Laurasia del match. 
     * @param _idCompetition - Id Laursia de la competición del Match, por ejemplo 122: ChampionsLeague
     * @param _idMatchType - Typo de Match. Debe existir en el contrato, por ejemplo: 1: Fútbol
     * @param _startDateTimestamp - Timestamp de inicio del partido o combate con timezone GMT.
     * @param _countryCode - Código ISO 3166-2 del país de la competencia. Si es internacional viajan INTLs 
     */
    function updateMatch( uint256 _idLaurasia, uint128 _idCompetition, uint128 _idMatchType
                        , uint _startDateTimestamp, string calldata _countryCode ) external onlyOwner(){
        require(matchTypesChecker[_idMatchType], "MT0002 MATCH TYPE DOES NOT EXIST");     
        require(matchesLaurasiaExistence[_idLaurasia], "MH0002 MATCH WITH LARUASIA DOES NOT EXIST" );  

        //Actualizamos los contadores del tipo de Evento
        if(_idMatchType != matches[_idLaurasia].matchType){
            matchTypes[matches[_idLaurasia].matchType].matchCounter--;
            matchTypes[_idMatchType].matchCounter++;
            matches[_idLaurasia].matchType = _idMatchType;
        }

        matches[_idLaurasia].idCompetition = _idCompetition;
        matches[_idLaurasia].startDate = _startDateTimestamp;
        matches[_idLaurasia].country = _countryCode;

        emit UpdateMatch(_idLaurasia);                                 
    }
}